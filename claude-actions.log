2025-08-28: Implemented BuildSpy - A comprehensive Go-based build system monitoring tool with real-time process tracking, flame graph visualization, CPU/memory monitoring, thread inspection, and web dashboard. Supports Make, Ninja, CMake, Bazel, and other build systems with automatic detection and performance analysis.

2025-08-28: Fixed flame graph visualization - Enhanced real-time updates with proper D3.js implementation, interactive tooltips, dark theme UI, hierarchical process tree layout, and improved WebSocket event handling for smooth real-time monitoring.

2025-08-28: Modified program lifecycle - BuildSpy now continues running after build completion, keeping the web server active until all browser connections close or Ctrl+C is pressed. Added build completion events and graceful shutdown handling.

2025-08-28: Redesigned visualization for performance - Replaced hierarchical flame graph with real-time timeline chart showing process durations, CPU usage opacity, throttled updates (4fps), reduced noise by filtering low-CPU events, and added build summary stats with active/completed process counts.

2025-08-28: Fixed tooltip issues and command parsing - Tooltips now properly disappear on mouseout with improved cleanup, global mouse handler, and better z-index. Also fixed command argument parsing to support quoted commands like "./buildspy -cmd 'make -j16'" by splitting the command string properly.

2025-08-28: Added build completion indicators - Web viewer now shows clear build status with animated completion notification, build progress counter, visual completion marker on timeline with green "BUILD COMPLETE âœ…" label, and pulsing animation effect when build finishes successfully.

2025-08-28: Split buildspy into two-component architecture:
- buildspy: CLI tool for capturing build metrics to BadgerDB database
- buildspyd: Daemon serving web dashboard for historical build analysis  
- Added multi-run management with search and filtering
- Implemented persistent storage with BadgerDB for long-term retention
- Created comprehensive web interface supporting both live and historical views
- Added REST API and WebSocket endpoints for programmatic access
- Built complete Makefile system for two-binary build process

2025-08-28: Refactored codebase to eliminate code duplication:
- Created proper Go package structure with shared packages
- Moved models, database, monitoring, and config into separate packages
- Eliminated 3x duplication of models.go and database.go files
- CLI and daemon now import shared packages instead of duplicating code
- Fixed flag conflicts by renaming verbose flags from -v to -verbose
- Successfully tested both CLI tool and daemon with new architecture

2025-08-29: Fixed database locking conflicts for concurrent operation:
- Implemented daemon detection in CLI tool using HTTP health check
- Added live submission API endpoint (/api/live/submit) in daemon 
- CLI automatically switches between direct DB mode and daemon communication
- Supports concurrent daemon and CLI execution without database conflicts
- Successfully tested both standalone and daemon communication modes

2025-08-29: Fixed nil pointer dereference in daemon mode:
- Added nil checks for pm.database in monitoring code
- ProcessMonitor now safely handles daemon mode where database is nil
- All database operations (SaveProcess, SaveBuildEvent) now check for nil database
- CLI tool works correctly in daemon communication mode without crashes

2025-08-29: Implemented live build completion and separation:
- Added automatic detection of build_complete events to move builds from live to normal
- Created separate /api/live endpoint for active builds only
- Modified /api/runs endpoint to exclude currently live builds
- Live builds are automatically removed from live tracking when completed
- Provides clean separation between active and completed builds in the UI

2025-08-29: Added auto-refresh for live builds in web interface:
- Split web interface into separate "Live Builds" and "Completed Builds" sections
- Implemented automatic refresh of live builds every 2 seconds
- Added real-time duration calculation for live builds
- Auto-refresh also updates live build count in statistics
- Live builds automatically disappear from live section when completed
- No manual refresh needed - live builds update automatically in real-time

2025-08-29: Implemented crash detection for monitor application:
- Added timeout mechanism (30 seconds) to detect crashed/stopped buildspy CLI tools
- Crashed builds are automatically marked as "failed" with exit code -1
- Background task checks every 10 seconds for faster crash detection
- Crashed builds show ðŸ’¥ icon in web interface with "CRASHED" status
- Creates "build_crashed" events and properly calculates duration for failed builds
- Prevents live builds from staying stuck in "running" state indefinitely

2025-08-29: Created comprehensive API documentation:
- Documented all HTTP endpoints (/api/runs, /api/live, /api/stats, etc.)
- Added WebSocket endpoint documentation (/ws/live, /ws/runs/{id})
- Documented all data models (BuildRun, ProcessInfo, BuildEvent)
- Added status values, error responses, and background processing details
- Created docs/API.md for GUI client development reference

2025-08-29: Added delete functionality to daemon API:
- Added DELETE /api/runs endpoint for bulk deletion via query params
- Added DELETE /api/runs/{id} for single build deletion
- Added POST /api/delete for bulk deletion with JSON body
- Implemented safety checks to prevent deletion of live builds
- Returns detailed response with success/error counts and specific error messages

2025-08-29: Implemented Fyne GUI application foundation:
- Created GUI project structure with Go modules and Fyne framework
- Implemented main application window with navigation and two-view layout
- Created comprehensive API client with all daemon endpoints
- Added health checking, error handling, and proper timeout configuration
- Integrated data fetching and UI refresh functionality for live and completed builds